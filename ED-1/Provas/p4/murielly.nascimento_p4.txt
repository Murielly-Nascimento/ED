

1) Qual o motivo de utilizar um vetor de acesso circular na implementação de uma fila estática?

Trata-se de otimização. 
Nesse caso (TSeqList), usamos arrays internamente e ao fazermos um pop simplesmente adicionamos
um a variável que representa a posição do primeiro elemento. Usando essa lógica o 
array cresce rapidamente e muitos de seus espaços ficam inutilizados. O acesso circular
evita isso.

 check:<<<erro: "array cresce"?>>>>
check:<<<erro: tem várias formas de implementar o que foi relatado aqui. No entanto, faltou abordar a questão do tempo computacional que essa abordagem proporciona>>>>


2) Uma das utilidades das listas circulares dinâmicas é a possibilidade de percorrer todos os elementos por diversas vezes em um loop. Modifique o TAD para incluir uma função que retornará sempre o próximo elemento. Por exemplo, se a lista não foi percorrida ainda, o próximo elemento é a cabeça. Depois, ao chamar a função novamente, será devolvido o segundo elemento, e assim sucessivamente.
(a) mostrar como fica a estrutura do TAD

typedef struct clistnode CList_node;

struct circlist{
    CList_node *end; check:<<<erro: a solução era só colocar um ponteiro para o next na sua estrutura>>>>
};

struct clistnode
{
    struct aluno data;
    CList_node *next;
};

(b) mostrar a função que retorna o próximo elemento
*Não é necessário mostrar as outras funções afetadas pela modificação proposta

int list_find_next(CircList *clist,int *chamadas, struct aluno *al){
  if(clist == NULL){
    return INVALID_NULL_POINTER;
  }else{
    if(clist->end == NULL){
      return OUT_OF_RANGE;
    }
    CList_node *aux;
    aux = clist->end;

    if(*chamadas == 1){
        aux = aux->next;
        *al = aux->data;
        *chamadas = *chamadas + 1;
    }
    else{
        int cont = 0;
        while(cont != *chamadas){ check:<<<erro: vc deixou todo o controle do próximo ao programa principal ao invés de deixar no TAD>>>>
            aux = aux->next;
            cont++;
        }
        *al = aux->data;
        *chamadas = *chamadas + 1;
    }

    return SUCCESS;
  }
}

3)
Crie uma função que faz a junção de duas strings. A função deve ter como entrada as duas strings e a string resultante da junção. A alocação de espaço necessário para a string concatenada deve ser feita dentro da função. A função deve retornar um valor inteiro: (0 - zero) se a junção ocorreu de forma corretam; (-1) em caso de erro. Mostre o uso da função no programa principal. Não é permitido criar novos tipos de dados para a solução do exercício (ou seja, sem uso de structs).


Digite a string 1: Oi,
Digite a string 2: Como vai?

Texto concatenado: Oi, Como vai?

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
 check:<<<erro: a string resultante deveria ser passada como ponteiro de ponteiro para char>>>>
int junta(char *str1, char *str2, char *resultado){
    int tamanho = strlen(str1);
    int tamanho2 = strlen(str2);
    int Total = tamanho2 + tamanho; check:<<<erro: faltou espaço para o \0>>>>
    char *str3 = malloc(Total*sizeof(char));
    if(str3!=NULL){
        int i = 0;
        for(i = 0; i< tamanho; i++){
            str3[i] = str1[i];
        }
        for(int j = 0; j<tamanho2; j++){
            str3[i] = str2[j];
            i++;
        }
        strcpy(resultado, str3);
        return 0;
    }
    else return -1;
}


int main(void){

    char str1[20] = {"OI"};
    char str2[20] = {"Tudo"};
    char str3[40] = {'\0'};

    printf("Digite a string 1: ");
    fgets(str1, 20, stdin);
    str1[strcspn(str1, "\n")] = '\0';
    printf("Digite a string 2: ");
    fgets(str2, 20, stdin);
    str2[strcspn(str2, "\n")] = '\0';

    junta(str1,str2,str3);

    printf("%s", str3);

    return 0;
}


4)Mostre como uma pilha pode ser usada para resolver a expressão matemática abaixo

Cada número e operador é lido em um passo. Para cada passo, mostre o estado da pilha 
Exemplo de como mostrar a pilha 
2 2 <topo  // o número 2 está no topo
2 3 4 <topo // o número 4 está no topo

Expressão: 

5 -7 5 + * 9 -

5 ( 5 está no topo)
5 -7 (-7 está no topo)
5 -7 5 (5 está no topo)

5 (-7 5 +) //operação
5 -2 // resultado, 2 está no topo

5 -2 * //operação
-10 // resultado, -10 está no topo

-10 9 // 9 está no topo
-10 9 - //operação check:<<<erro: 9 - -10>>>>
-19 //resultado
